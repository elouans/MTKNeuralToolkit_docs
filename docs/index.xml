<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MTKNeuralToolkit.jl on MTKNeuralToolkit</title>
    <link>https://elouans.github.io/MTKNeuralToolkit_docs/</link>
    <description>Recent content in MTKNeuralToolkit.jl on MTKNeuralToolkit</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://elouans.github.io/MTKNeuralToolkit_docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Examples and Use Cases</title>
      <link>https://elouans.github.io/MTKNeuralToolkit_docs/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://elouans.github.io/MTKNeuralToolkit_docs/examples/</guid>
      <description>&lt;h1 id=&#34;examples-and-use-cases&#34;&gt;Examples and Use Cases&lt;/h1&gt;&#xA;&lt;p&gt;Real-world examples demonstrating MTKNeuralToolkit capabilities, from single neurons to complex networks.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example-categories&#34;&gt;Example Categories&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#single-neurons&#34;&gt;Single Neuron Models&lt;/a&gt;&lt;/strong&gt;: Basic dynamics and channel behavior&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#small-networks&#34;&gt;Small Networks&lt;/a&gt;&lt;/strong&gt;: 2-5 neuron circuits with specific connectivity&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#biological-circuits&#34;&gt;Biological Circuits&lt;/a&gt;&lt;/strong&gt;: STG and other well-characterized networks&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#custom-components&#34;&gt;Custom Components&lt;/a&gt;&lt;/strong&gt;: Building novel synapse and neuron types&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;single-neurons&#34;&gt;Single Neurons&lt;/h2&gt;&#xA;&lt;h3 id=&#34;hodgkin-huxley-dynamics&#34;&gt;Hodgkin-Huxley Dynamics&lt;/h3&gt;&#xA;&lt;p&gt;Classic model showing action potential generation and channel kinetics.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; MTKNeuralToolkit, OrdinaryDiffEq, Plots&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; ModelingToolkitStandardLibrary&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Blocks&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TimeVaryingFunction&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create stimulus and neuron&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@named&lt;/span&gt; stimulus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TimeVaryingFunction(f&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; sin(t))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;neuron &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build_HH(stimulus; name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:neuron&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;neuron &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; structural_simplify(neuron)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Simulate&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ODEProblem(neuron, [], (&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;200.0&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; solve(prob, Tsit5())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Plot voltage and channel states&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plot(layout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plot!(p, sol, idxs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[neuron&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Na&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;conductance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m_gate, neuron&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Na&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;conductance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;h_gate], &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      subplot&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Na Channel Gates&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plot!(p, sol, idxs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[neuron&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;K&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;conductance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;n_gate], &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      subplot&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;K Channel Gate&amp;#34;&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plot!(p, sol, idxs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[neuron&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;soma&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;v], &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      subplot&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Membrane Voltage&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Key Features:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Quick Start Guide</title>
      <link>https://elouans.github.io/MTKNeuralToolkit_docs/quick_start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://elouans.github.io/MTKNeuralToolkit_docs/quick_start/</guid>
      <description>&lt;h1 id=&#34;quick-start-guide&#34;&gt;Quick Start Guide&lt;/h1&gt;&#xA;&lt;p&gt;Get up and running with MTKNeuralToolkit in minutes.&lt;/p&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Julia 1.6+ (1.9+ recommended)&lt;/li&gt;&#xA;&lt;li&gt;Basic familiarity with differential equations&lt;/li&gt;&#xA;&lt;li&gt;Understanding of neuronal membrane dynamics (helpful but not required)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;optional-background&#34;&gt;Optional Background&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Hodgkin-Huxley formalism&lt;/li&gt;&#xA;&lt;li&gt;ModelingToolkit.jl concepts&lt;/li&gt;&#xA;&lt;li&gt;OrdinaryDiffEq.jl solving methods&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Pkg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Pkg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MTKNeuralToolkit&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Development dependencies for plotting&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Pkg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OrdinaryDiffEq&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Plots&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ModelingToolkitStandardLibrary&amp;#34;&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;your-first-neuron&#34;&gt;Your First Neuron&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s create and simulate a single Hodgkin-Huxley neuron:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; MTKNeuralToolkit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; OrdinaryDiffEq&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; ModelingToolkitStandardLibrary&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Blocks&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TimeVaryingFunction&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Plots&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create input stimulus&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@named&lt;/span&gt; stimulus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TimeVaryingFunction(f&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; sin(t))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Build HH neuron with stimulus&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;neuron &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build_HH(stimulus; name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:neuron&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Simplify the system&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;neuron_simplified &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; structural_simplify(neuron)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create and solve ODE problem&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ODEProblem(neuron_simplified, [], (&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50.0&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; solve(prob, Tsit5())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Plot membrane voltage&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plot(sol, idxs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[neuron&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;soma&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;v], xlabel&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Time (ms)&amp;#34;&lt;/span&gt;, ylabel&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Voltage (mV)&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This creates a Hodgkin-Huxley neuron with sinusoidal input current and plots the resulting membrane voltage oscillations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Neuron Models</title>
      <link>https://elouans.github.io/MTKNeuralToolkit_docs/neuron_models/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://elouans.github.io/MTKNeuralToolkit_docs/neuron_models/</guid>
      <description>&lt;h1 id=&#34;neuron-models&#34;&gt;Neuron Models&lt;/h1&gt;&#xA;&lt;p&gt;MTKNeuralToolkit natively implements four major neuron model families, each with different levels of biophysical detail and computational requirements:&#xA;Integrate-and-Fire and Leaky Integrate-and-Fire neurons.&#xA;Hodgkin-Huxley neurons.&#xA;Liu/Prinz neurons.&#xA;Integrate-and-Fire neurons.&lt;/p&gt;&#xA;&lt;p&gt;The intention here is not to cover the extent of what you will be using, but instead to give building blocks and sample code covering a wide enough span of complexity and functionality to allow you to implement your own neuron models. If you only need these natively implemented neurons, then great, your job is much much easier :D.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Synapses and Connectivity</title>
      <link>https://elouans.github.io/MTKNeuralToolkit_docs/synapses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://elouans.github.io/MTKNeuralToolkit_docs/synapses/</guid>
      <description>&lt;h1 id=&#34;synapses-and-connectivity&#34;&gt;Synapses and Connectivity&lt;/h1&gt;&#xA;&lt;p&gt;MTKNeuralToolkit implements voltage-gated chemical synapses with sigmoid activation and first-order kinetics.&lt;/p&gt;&#xA;&lt;h2 id=&#34;synaptic-transmission-model&#34;&gt;Synaptic Transmission Model&lt;/h2&gt;&#xA;&lt;p&gt;All chemical synapses follow the same general mathematical framework:&lt;/p&gt;&#xA;&lt;h3 id=&#34;general-equations&#34;&gt;General Equations&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;s_hat = 1 / (1 + exp((V_th - V_pre) / σ))&#xD;&#xA;τ_s = (1 - s_hat) / k&#xD;&#xA;ds/dt = (s_hat - s) / τ_s&#xD;&#xA;I_post = g * s * (V_post - E_rev)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;parameters&#34;&gt;Parameters&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;g&lt;/strong&gt;: Synaptic conductance (strength)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;E_rev&lt;/strong&gt;: Reversal potential (determines exc/inh)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;V_th&lt;/strong&gt;: Threshold voltage for activation&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;k&lt;/strong&gt;: Kinetic rate parameter&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;σ&lt;/strong&gt;: Sigmoid steepness&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;preset-synapse-types&#34;&gt;Preset Synapse Types&lt;/h2&gt;&#xA;&lt;p&gt;Four common synapse types are provided with biologically realistic parameters:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://elouans.github.io/MTKNeuralToolkit_docs/api_public/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://elouans.github.io/MTKNeuralToolkit_docs/api_public/</guid>
      <description>&lt;h1 id=&#34;public-api-reference&#34;&gt;Public API Reference&lt;/h1&gt;&#xA;&lt;p&gt;Complete reference for all functions intended for direct user interaction. These constitute the stable public API of MTKNeuralToolkit.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;neuron-building-functions&#34;&gt;Neuron Building Functions&lt;/h2&gt;&#xA;&lt;h3 id=&#34;build_if&#34;&gt;&lt;code&gt;build_IF&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;build_IF(input=nothing; name=:IF)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Build an Integrate-and-Fire neuron with threshold dynamics and reset mechanism.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;input&lt;/code&gt;: Optional stimulus (TimeVaryingFunction, Constant, etc.)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Symbol for neuron identification (default: &lt;code&gt;:IF&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt; ODESystem representing IF neuron with event-driven spiking&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Implementation Details:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Uses BasicSoma with C=10μF capacitance&lt;/li&gt;&#xA;&lt;li&gt;Implements threshold detection and reset mechanism&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
